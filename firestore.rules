/**
 * @file Firestore Security Rules for CyberWall Scanner Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 * All data is nested under /users/{userId}, providing a clear path-based authorization.
 * Additionally, an admin override is implemented via the /roles_admin/{userId} collection.
 *
 * @data_structure
 * - /users/{userId}: Stores user account information.
 * - /users/{userId}/scans/{scanId}: Stores security scan data for each user.
 * - /users/{userId}/scans/{scanId}/findings/{findingId}: Stores vulnerability findings for each scan.
 * - /roles_admin/{userId}: Presence of a document indicates admin status for a user.
 *
 * @key_security_decisions
 * - User data and associated scans/findings are strictly private and accessible only to the authenticated user.
 * - Listing of all users is disallowed.
 * - Admin override is supported via the /roles_admin collection. If a document exists for a user in this collection,
 *   that user is granted admin privileges.
 *
 * @denormalization_for_authorization
 * - The data structure is designed such that ownership can be determined from the path. No denormalization is required.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /***************** User Collection Rules *****************/

    /**
     * @description Controls access to user documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own user document.
     * @allow (get, update, delete) - Authenticated user can access their own user document.
     * @deny (create) - User cannot create a document with an ID that does not match their own.
     * @deny (get, update, delete) - User cannot access another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Only allow authenticated users
      allow get: if isOwner(userId) || isAdmin();
      allow list: if false; // No listing of all users

      // Users can only create their own document
      allow create: if isOwner(userId) && request.resource.data.id == userId;

      // Users can only update their own document, but cannot change their id (immutable).
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      // Users can only delete their own document.
      allow delete: if isExistingOwner(userId);
    }

    /***************** Scan Collection Rules *****************/

    /**
     * @description Controls access to scan documents within a user's document.
     * @path /users/{userId}/scans/{scanId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own scans.
     * @deny (create, get, list, update, delete) - User cannot access another user's scans.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scans/{scanId} {
      // Only allow authenticated users
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();

      // Users can only create scans under their user id. The userId field in the scan document must match the path.
      allow create: if isOwner(userId) && request.resource.data.userId == userId;

      // Users can only update their own scans.
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      // Users can only delete their own scans.
      allow delete: if isExistingOwner(userId);
    }

    /***************** Finding Collection Rules *****************/

    /**
     * @description Controls access to finding documents within a scan document.
     * @path /users/{userId}/scans/{scanId}/findings/{findingId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own findings.
     * @deny (create, get, list, update, delete) - User cannot access another user's findings.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/scans/{scanId}/findings/{findingId} {
      // Only allow authenticated users
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isOwner(userId) || isAdmin();

      // Users can only create findings under their user id and scan id. The scanId in the finding document must match the path.
      allow create: if isOwner(userId) && request.resource.data.scanId == scanId;

      // Users can only update their own findings.
      allow update: if isExistingOwner(userId) && request.resource.data.scanId == resource.data.scanId;

      // Users can only delete their own findings.
      allow delete: if isExistingOwner(userId);
    }
        /***************** Admin Roles Collection Rules *****************/
    /**
     * @description Controls access to the roles_admin collection.
     * @path /roles_admin/{userId}
     */
    match /roles_admin/{userId} {
        // Only allow admins to get a roles_admin document
        allow get: if isAdmin();
        // Only allow admins to list roles_admin documents
        allow list: if isAdmin();
        // Only allow admins to create a roles_admin document
        allow create: if isAdmin();
        // Only allow admins to update a roles_admin document
        allow update: if isAdmin();
        // Only allow admins to delete a roles_admin document
        allow delete: if isAdmin();
    }
  }
}