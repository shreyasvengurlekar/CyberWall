{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the CyberWall Scanner application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "scanIds": {
          "type": "array",
          "description": "References to Scans performed by this user. (Relationship: User 1:N Scan)",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "createdAt"
      ]
    },
    "Scan": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Scan",
      "type": "object",
      "description": "Represents a scan performed by a user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the scan."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who initiated the scan. (Relationship: User 1:N Scan)"
        },
        "url": {
          "type": "string",
          "description": "URL that was scanned."
        },
        "scanType": {
          "type": "string",
          "description": "Type of scan performed (e.g., quick, advanced)."
        },
        "startTime": {
          "type": "string",
          "description": "Timestamp indicating when the scan started.",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "description": "Timestamp indicating when the scan finished.",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Status of the scan (e.g., pending, running, completed, error)."
        },
        "reportId": {
          "type": "string",
          "description": "Reference to the generated Report for this scan. (Relationship: Scan 1:1 Report)"
        }
      },
      "required": [
        "id",
        "userId",
        "url",
        "scanType",
        "startTime",
        "status"
      ]
    },
    "Report": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Report",
      "type": "object",
      "description": "Represents a security scan report.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the report."
        },
        "scanId": {
          "type": "string",
          "description": "Reference to the Scan that generated this report. (Relationship: Scan 1:1 Report)"
        },
        "generatedTime": {
          "type": "string",
          "description": "Timestamp indicating when the report was generated.",
          "format": "date-time"
        },
        "summary": {
          "type": "string",
          "description": "Summary of the scan findings."
        },
        "findingIds": {
          "type": "array",
          "description": "References to Findings included in the report. (Relationship: Report 1:N Finding)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "scanId",
        "generatedTime",
        "summary"
      ]
    },
    "Finding": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Finding",
      "type": "object",
      "description": "Represents a specific security vulnerability finding.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the finding."
        },
        "reportId": {
          "type": "string",
          "description": "Reference to the Report this finding belongs to. (Relationship: Report 1:N Finding)"
        },
        "severity": {
          "type": "string",
          "description": "Severity level of the vulnerability (e.g., low, medium, high, critical)."
        },
        "type": {
          "type": "string",
          "description": "Type of vulnerability (e.g., SQL injection, XSS)."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the vulnerability."
        },
        "suggestedFix": {
          "type": "string",
          "description": "Suggested fix for the vulnerability."
        }
      },
      "required": [
        "id",
        "reportId",
        "severity",
        "type",
        "description",
        "suggestedFix"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.  The 'userId' is the Firebase Authentication UID.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user, corresponding to their Firebase Authentication UID."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/scans/{scanId}",
        "definition": {
          "entityName": "Scan",
          "schema": {
            "$ref": "#/backend/entities/Scan"
          },
          "description": "Stores scans performed by a user. 'userId' indicates ownership. 'scanId' is the unique ID of the scan.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user who performed the scan."
            },
            {
              "name": "scanId",
              "description": "The unique identifier for the scan."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/scans/{scanId}/reports/{reportId}",
        "definition": {
          "entityName": "Report",
          "schema": {
            "$ref": "#/backend/entities/Report"
          },
          "description": "Stores reports generated for a scan. 'userId' indicates ownership, and 'scanId' links the report to the scan. 'reportId' is the unique ID of the report.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user who owns the scan and report."
            },
            {
              "name": "scanId",
              "description": "The unique identifier for the scan the report is associated with."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the report."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/scans/{scanId}/reports/{reportId}/findings/{findingId}",
        "definition": {
          "entityName": "Finding",
          "schema": {
            "$ref": "#/backend/entities/Finding"
          },
          "description": "Stores findings included in a report. 'userId' indicates ownership, 'scanId' links the finding to the scan, and 'reportId' links to the report. 'findingId' is the unique ID of the finding.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user who owns the scan, report, and finding."
            },
            {
              "name": "scanId",
              "description": "The unique identifier for the scan the report and finding are associated with."
            },
            {
              "name": "reportId",
              "description": "The unique identifier for the report the finding belongs to."
            },
            {
              "name": "findingId",
              "description": "The unique identifier for the finding."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a clear, secure, and scalable data model for the CyberWall Scanner application. It leverages path-based ownership for user-specific data and denormalization to ensure authorization independence. The structure is optimized for querying and reporting on user activity and scan results.\n\nThe core principle is to organize data around users and their scans.  Each user has a dedicated subcollection for their scans, and each scan has a subcollection for its findings. This structure allows for easy retrieval of all scans for a given user and all findings for a specific scan.\n\n**Authorization Independence:** The structure enforces authorization independence by using path-based ownership for user data. Specifically, scans and reports are stored within the `/users/{userId}` path, eliminating the need for `get()` calls in security rules to verify ownership.\n\n**QAPs (Rules are not Filters):**\n*   Secure `list` operations for user-owned data are enabled by storing scans and reports as subcollections under `/users/{userId}`. This ensures that only the authenticated user can access their own data.\n*   The segregation of user data into separate `/users/{userId}` collections inherently supports QAPs, as rules are scoped to a specific user's data without needing to filter based on user ID within the documents themselves.\n\nThis structure supports the creation of robust and easily debuggable security rules because access control is primarily determined by the path, not by complex document properties. By following this structural segregation and access modeling, we can ensure a secure and efficient application."
  }
}